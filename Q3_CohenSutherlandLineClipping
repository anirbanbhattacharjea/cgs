# Define region codes
INSIDE = 0  # 0000
LEFT = 1    # 0001
RIGHT = 2   # 0010
BOTTOM = 4  # 0100
TOP = 8     # 1000

# Define the clipping window boundaries
X_MIN = 2
X_MAX = 8
Y_MIN = 1
Y_MAX = 6

# Define the Cohen-Sutherland line clipping algorithm function
def cohen_sutherland_clip(x1, y1, x2, y2):
    # Compute region codes for both endpoints
    code1 = compute_region_code(x1, y1)
    code2 = compute_region_code(x2, y2)
    
    # Initialize accept flag
    accept = False
    
    while True:
        # If both endpoints are inside the clipping window, accept the line
        if code1 == INSIDE and code2 == INSIDE:
            accept = True
            break
        
        # If both endpoints are outside the same boundary, reject the line
        elif (code1 & code2) != 0:
            break
        
        # Otherwise, at least one endpoint is outside the clipping window
        else:
            # Choose the endpoint outside the clipping window
            if code1 != INSIDE:
                code_outside = code1
            else:
                code_outside = code2
            
            # Find the intersection point using boundary coordinates
            if code_outside & TOP:
                x = x1 + (x2 - x1) * (Y_MAX - y1) / (y2 - y1)
                y = Y_MAX
            elif code_outside & BOTTOM:
                x = x1 + (x2 - x1) * (Y_MIN - y1) / (y2 - y1)
                y = Y_MIN
            elif code_outside & RIGHT:
                y = y1 + (y2 - y1) * (X_MAX - x1) / (x2 - x1)
                x = X_MAX
            elif code_outside & LEFT:
                y = y1 + (y2 - y1) * (X_MIN - x1) / (x2 - x1)
                x = X_MIN
            
            # Update the endpoint with the intersection point
            if code_outside == code1:
                x1, y1 = x, y
                code1 = compute_region_code(x1, y1)
            else:
                x2, y2 = x, y
                code2 = compute_region_code(x2, y2)
    
    # Return the clipped line endpoints if the line is accepted
    if accept:
        return x1, y1, x2, y2
    else:
        return None, None, None, None

# Define a function to compute the region code for a point
def compute_region_code(x, y):
    code = INSIDE
    if x < X_MIN:
        code |= LEFT
    elif x > X_MAX:
        code |= RIGHT
    if y < Y_MIN:
        code |= BOTTOM
    elif y > Y_MAX:
        code |= TOP
    return code

# Define the line coordinates
x1, y1 = 1, 3
x2, y2 = 8, 3

# Clip the line using Cohen-Sutherland algorithm
x1_c, y1_c, x2_c, y2_c = cohen_sutherland_clip(x1, y1, x2, y2)

# Print the clipped line endpoints
print("Clipped line endpoints:", (x1_c, y1_c), "-", (x2_c, y2_c))
