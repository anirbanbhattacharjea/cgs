import numpy as np
import matplotlib.pyplot as plt

def hermite_curve(P0, P1, T0, T1, num_points=100):
    t = np.linspace(0, 1, num_points)
    H0 = 2*t**3 - 3*t**2 + 1
    H1 = -2*t**3 + 3*t**2
    H2 = t**3 - 2*t**2 + t
    H3 = t**3 - t**2
    x = P0[0]*H0 + P1[0]*H1 + T0[0]*H2 + T1[0]*H3
    y = P0[1]*H0 + P1[1]*H1 + T0[1]*H2 + T1[1]*H3
    return x, y

def bezier_curve(P0, P1, P2, P3, num_points=100):
    t = np.linspace(0, 1, num_points)
    x = (1 - t)**3 * P0[0] + 3 * (1 - t)**2 * t * P1[0] + 3 * (1 - t) * t**2 * P2[0] + t**3 * P3[0]
    y = (1 - t)**3 * P0[1] + 3 * (1 - t)**2 * t * P1[1] + 3 * (1 - t) * t**2 * P2[1] + t**3 * P3[1]
    return x, y

# Define control points and tangents
P0 = (1, 1)
P1 = (2, 3)
T0 = (1, 2)
T1 = (3, 1)

# Calculate Hermite curve
hermite_x, hermite_y = hermite_curve(P0, P1, T0, T1)

# Define Bezier control points
P0 = (1, 1)
P1 = (2, 3)
P2 = (4, 2)
P3 = (5, 4)

# Calculate Bezier curve
bezier_x, bezier_y = bezier_curve(P0, P1, P2, P3)

# Plot Hermite curve
plt.subplot(1, 2, 1)
plt.plot(hermite_x, hermite_y, label='Hermite Curve', color='blue')
plt.scatter([P0[0], P1[0]], [P0[1], P1[1]], color='red', label='Control Points')
plt.scatter([T0[0], T1[0]], [T0[1], T1[1]], color='green', label='Tangents')
plt.title('Hermite Curve')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)

# Plot Bezier curve
plt.subplot(1, 2, 2)
plt.plot(bezier_x, bezier_y, label='Bezier Curve', color='blue')
plt.scatter([P0[0], P1[0], P2[0], P3[0]], [P0[1], P1[1], P2[1], P3[1]], color='red', label='Control Points')
plt.title('Bezier Curve')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
